<?php

#1Write a function largestOdd(arr) that takes an array arr and returns the largest odd number in it. If there are no odd numbers, it should return a string "No odd numbers found".
$arr = [2, 3, 4, 6, 7];

        function largestOdd($arr){
            return array_reduce($arr,function($prev_result,$item){
                    return ($item % 2) && $item >= $prev_result ? $item : $prev_result;
                }) ?? "No odd numbers found";
        }
        echo largestOdd($arr);

#2Let s be a string that contains a sequence of decimal numbers separated by commas, e.g., s = '1.23,2.4,3.123'. Write a function sequenceSum(s) that prints the sum of the numbers in s.
        function sequenceSum($s){
            $sum = 0;
            $sep = explode(", ",$s);

            foreach($sep as $i){
                $sum = trim($i) + $sum;
            }

            return $sum;
        }
        echo sequenceSum('1.1, 2.1, 3.9');

#3Write a function vowelsNumber(s) that accepts string s as a parameter and counts up the number of vowels contained in the string. Valid vowels are: 'a', 'e', 'i', 'o', and 'u'.
        function vowelsNumber($s){

        }
        echo isPalindrome('azcbobobegghakl');

#4Write a function  contains(str1, str2) that accepts two strings str1 and str2 as arguments and returns a boolean True if either string occurs anywhere in the other, and False otherwise. Function should be case insensitive.
        function contains($str1, $str2){
            return stripos($str1,$str2) !== false || stripos($str2, $str1) !== false ? true : false;
        }






#5Write a function isPalindrome(s) that accepts string s as an argument and returns a boolean True if string reads the same way backwards and forwards. The function should be case and spaces insensitive.
        function isPalindrome($s){
            return strrev(strtolower($s)) === strtolower($s) ? true : false;
}

        echo isPalindrome('topot');
        echo isPalindrome('ropot');

#6Write a function findExtremeDivisors(n1, n2). n1 and n2 should be positive ints. The function should return a string “Error: n1 and n2 should be positive ints!” if either n1 or n2 <= 0.The function returns an array of two elements containing the smallest common divisor > 1 and the largest common divisor of n1 and n2.If the are no common divisors, the function should return a string "There are no common divisors".
        function findExtremeDivisors($n1,$n2){
            $m = max([$n1,$n2]);
            $min = 0;
            $max = 0;

            if($n1 <= 0 || $n2 <= 0) throw new Error('Error: n1 and n2 should be positive ints!');

            for($i = 2; $i <= $m; $i++){
                if(!($n1 % $i) && !($n2 % $i)){
                    $max = $max <= $i ? $i : $max;
                    $min = !$min || $min >= $i ? $i : $min;
                }
            }

            return $min && $max ? [$min,$max] : "There are no common divisors";
        }

        print_r(findExtremeDivisors(12,6));
        print_r(findExtremeDivisors(7,7));
        print_r(findExtremeDivisors(1,13));
        print_r(findExtremeDivisors(1,-1));
?>